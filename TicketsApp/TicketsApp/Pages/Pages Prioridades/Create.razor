@page "/P_Create"
@inject HttpClient httpClient
@inject NavigationManager Navigation
@using System.Xml.Linq

<PageTitle>Registro de Prioridades</PageTitle>
<EditForm Model="prioridad" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card">
        <div class="card-header">
            <h1>Registro Prioridades </h1>
        </div>
        <div class=" card-body">
            <label>Prioridad Id</label>

            <div class="input-group">
                <InputNumber min="0" @bind-Value="prioridad.PrioridadesId" class="id-input"></InputNumber>
            </div>

            <div>
                <label>Descripci&oacute;n:</label>
                <InputText @bind-Value="prioridad.Descripcion" class="form-control"></InputText>
                <ValidationMessage For="@(() => prioridad.Descripcion)" />
            </div>
            <div>
                <label>Dias Compromiso:</label>
                <InputNumber @bind-Value="prioridad.DiasCompromiso" class="form-control" ></InputNumber>
                <ValidationMessage For="@(() => prioridad.DiasCompromiso)" />
            </div>

        </div>
        <div class="card-footer ">

            <div class="card-footer">
                <button type="button" class="btn btn-outline-primary  bi bi-car-front" @onclick="Atras">Volver <i class="bi bi-arrow-return-left" /></button>
                <button type="submit" class="btn btn-outline-success">Guardar <i class="bi bi-floppy-fill" /></button>
            </div>

        </div>
    </div>

</EditForm>

@code {
    [Parameter]
    public int PrioridadesId { get; set; }
    public Prioridades prioridad { get; set; } = new Prioridades();
  
   


    protected override async Task OnInitializedAsync()
    {
        if (PrioridadesId > 0)
        {
            this.prioridad.PrioridadesId = PrioridadesId;
            await Buscar();
        }
        
    }

    private async Task<Prioridades> BuscarVehiculo(int prioridadId)
    {
        Prioridades prioridad = new Prioridades();
        var prioridadEncontrado = await httpClient.GetFromJsonAsync<Prioridades>($"api/Prioridades/{prioridadId}");
        if (prioridadEncontrado != null)
            return prioridad = prioridadEncontrado;
        return new Prioridades();
    }

    public async Task Buscar()
    {
        var prioridadIdEncontrado = (await httpClient.GetFromJsonAsync<List<Prioridades>>($"api/Prioridades"))!
        .ToList()
        .Any(t => t.PrioridadesId == prioridad.PrioridadesId);
        if (prioridadIdEncontrado)
        {
            var prioridadEncontrado = await httpClient.GetFromJsonAsync<Prioridades>($"api/Prioridades/{prioridad.PrioridadesId}");
            if (prioridadEncontrado != null)
            {
                this.prioridad = prioridadEncontrado;
                StateHasChanged();
            }
        }

    }

    public async Task Guardar()
    {
        var response = await httpClient.PostAsJsonAsync("api/Prioridades", prioridad);
        if (!response.IsSuccessStatusCode)
        {
            return;
        }

        StateHasChanged();
        this.Nuevo();
        this.Atras();
    }

    void Atras()
    {
        Navigation.NavigateTo("/Index");
    }

    public void Nuevo()
    {
        prioridad = new Prioridades();
       
    }

    public async Task Eliminar()
    {
        var response = await httpClient.DeleteAsync($"api/Prioridades/{prioridad.PrioridadesId}");
        if (!response.IsSuccessStatusCode)
        {
            return;
        }
        Nuevo();
    }



 

 
}


