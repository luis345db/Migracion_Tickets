@page "/Edit"
@page "/Edit/{PrioridadesId:int}"
@inject NavigationManager Navigation
@inject HttpClient httpClient
@inject IJSRuntime JSRuntime

<EditForm Model="prioridad" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card">
        <div class="card-header">
            <h1>Editar Prioridades </h1>
        </div>
        <div class=" card-body">
            <label>PrioridadesId</label>

            <div class="input-group">
                <InputNumber min="0" @bind-Value="prioridad.PrioridadesId" class="id-input"></InputNumber>
            </div>
         

            <div>
                <label>Descripci&oacute;n:</label>
                <InputText @bind-Value="prioridad.Descripcion" class="form-control"></InputText>
                <ValidationMessage For="@(() => prioridad.Descripcion)" />
            </div>
            <div>
                <label>DiasCompromiso:</label>
                <InputNumber @bind-Value="prioridad.DiasCompromiso" class="form-control"></InputNumber>
                <ValidationMessage For="@(() => prioridad.DiasCompromiso)" />
            </div>
           

        </div>
        <div class="card-footer ">

            <div class="card-footer">
                <button type="button" class="btn btn-outline-primary" @onclick="Atras">Volver <i class="bi bi-arrow-return-left" /></button>
                <button type="submit" class="btn btn-outline-success">Guardar <i class="bi bi-floppy-fill" /></button>
            </div>

        </div>
    </div>

   

</EditForm>


@code {
    [Parameter]
    public int PrioridadesId { get; set; }
    public Prioridades prioridad { get; set; } = new Prioridades();
   


    protected override async Task OnInitializedAsync()
    {
        if (PrioridadesId > 0)
        {
            var prioridadEncontrado = await httpClient.GetFromJsonAsync<Prioridades>($"api/Prioridades/{PrioridadesId}");
            if (prioridadEncontrado != null)
            {
                prioridad = prioridadEncontrado;
              
            }

        }
    }


    private async Task<Prioridades> BuscarVehiculo(int prioridadId)
    {
        Prioridades prioridad = new Prioridades();
        var prioridadEncontrado = await httpClient.GetFromJsonAsync<Prioridades>($"api/Prioridades/{prioridadId}");
        if (prioridadEncontrado != null)
            return prioridad = prioridadEncontrado;
        return new Prioridades();
    }

    public async Task Buscar()
    {
        var prioridadIdEncontrado = (await httpClient.GetFromJsonAsync<List<Prioridades>>($"api/Prioridades"))!
        .ToList()
        .Any(t => t.PrioridadesId == prioridad.PrioridadesId);
        if (prioridadIdEncontrado)
        {
            var prioridadEncontrado = await httpClient.GetFromJsonAsync<Prioridades>($"api/Prioridades/{prioridad.PrioridadesId}");
            if (prioridadEncontrado != null)
            {
                this.prioridad = prioridadEncontrado;
                StateHasChanged();
            }
        }

    }

    public async Task Guardar()
    {
        var response = await httpClient.PutAsJsonAsync($"api/Prioridades/{PrioridadesId}", prioridad);
        if (!response.IsSuccessStatusCode)
        {
            return;
        }

        StateHasChanged();
        this.Nuevo();
        this.Atras();
    }

    void Atras()
    {
        Navigation.NavigateTo("/");
    }

    public void Nuevo()
    {
        prioridad = new Prioridades();
       

    }

}
